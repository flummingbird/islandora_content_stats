<?php

class ContentStatsCountsTestCase extends IslandoraCollectionWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Check stats',
      'description' => 'Ensure that stats are correct.',
      'group' => 'Content stats',
    );
  }

  public function setUp() {
    parent::setUp(['islandora', 'islandora_basic_collection', 'islandora_content_stats']);
    $this->namespace = 'latech-cmprt';
    $this->testCollection = $this->namespace . ':' . $this->randomName();
  }


  public function testBasicStats() {

    $user = $this->drupalCreateUser(array_keys(module_invoke_all('permission')));
    $this->drupalLogin($user);
    $this->createTestCollection('Test Collection', array('islandora:sp_large_image_cmodel', 'islandora:batch_testCM'), $this->testCollection);
    $properties = [
      'models' => 'islandora:sp_large_image_cmodel',
      'parent' => $this->testCollection
    ];
    $imagesToCreate = 5;
    foreach(range(1,$imagesToCreate) as $notUsed) {
      $properties['label'] = "A test image {$this->randomString(10)}";
      $properties['pid'] = "{$this->namespace}:{$this->randomName()}";
      $this->ingestConstructedObject($properties);
    }

    module_load_include('inc', 'islandora_content_stats', 'queries');
    $collections = get_all_collections();
    $this->assertEqual(count($collections), 1);

    $this->drupalGet("/islandora/object/{$this->testCollection}");
    $this->drupalGet("/islandora/object/{$this->testCollection}/manage/properties");
    $this->drupalPost('/admin/islandora/tools/content_stats', array(), 'Run Queries Now');
    $this->drupalGet('/data');
    $this->assertNoText('table is empty', "Should not see the text 'table is empty'");

    $query = $this->getQuery('islandora:sp_large_image_cmodel');
    $img_count = $query->fetchField();
    $this->assertEqual($imagesToCreate, $img_count, "Created $imagesToCreate images, found $img_count");

  }

  public function getQuery($cmodel = FALSE, $institution = FALSE) {
    $where = '';
    $args = [];
    if ($cmodel || $institution) {
      $where .= "WHERE ";
      if ($cmodel) {
        $args['cmodel'] = $cmodel;
        $where .= "cmodel = :cmodel";
      }
      if ($institution) {
        $args['inst'] = $institution;
        $both = $cmodel ? 'AND' : '';
        $where .= " $both inst = :inst";
      }
    }
    $sql = sprintf("select count from {islandora_content_stats} %s", $where);
    return db_query($sql, $args);
  }

  public function testComplex() {
    $data = [
      [
        'prefix' => 'abc-',
        'collections' => [
          'xyz' => [
            'islandora:sp_large_image_cmodel' => 15,
            'islandora:sp-audioCModel' => 4
          ],
          'mmm' => [
            'islandora:sp_large_image_cmodel' => 23
          ],
        ],
      ],
      [
        'prefix' => 'zzz-',
        'collections' => [
          'ppp' => [
            'islandora:sp_large_image_cmodel' => 5,
            'islandora:sp-audioCModel' => 6
          ],
          'ooo' => [
            'islandora:sp_large_image_cmodel' => 3
          ],
        ],
      ],
    ];
    // get logged in and such
    $user = $this->drupalCreateUser(array_keys(module_invoke_all('permission')));
    $this->drupalLogin($user);

    // populate test data
    $institutions = [];
    foreach ($data as $params) {
      $inst = new Institution($params);
      $institutions[] = $inst;
      foreach ($inst->collections as $name => $models) {
        $namespace = $inst->prefix . $name;
        $pid = "$namespace:{$this->randomName()}";
        $label = "Collection called $name";
        $this->createTestCollection($name, array_keys($models), $pid);
        foreach ($models as $model => $sum) {
          $this->constructObjects($model, $pid, $this->randomName(), $namespace, $sum);
        }
      }
    }

    $this->drupalPost('/admin/islandora/tools/content_stats', array(), 'Run Queries Now');
    $this->drupalGet('/data');
    $this->assertNoText('table is empty', "Should not see the text 'table is empty'");

    foreach ($institutions as $institution) {
      foreach ($institution->getAllModels() as $m) {
        $query = $this->getQuery($m, $institution->prefix);
        $db_count = $query->fetchField();
        $this->assertEqual($institution->getModelCount($m), $db_count, "found ($db_count) items having model ($m) in institution {$institution->prefix}");
      }
    }
  }

  public function constructObjects($models, $parent, $label, $pid, $count) {
    $properties = [
      'models' => $models,
      'parent' => $parent,
      'label'  => $label,
      'pid'    => $pid
    ];

    foreach(range(1, $count) as $notUsed) {
      $this->ingestConstructedObject($properties);
    }
  }
}

class Institution {
  public $prefix, $collections, $parentInst;
  public function __construct ($params) {
    $this->prefix = $params['prefix'];
    $this->collections = $params['collections'];
    $this->parentInst = FALSE;
  }

  public function getModelCount($model) {
    $total = 0;
    foreach ($this->collections as $name => $details) {
      if (in_array($model, array_keys($details))) {
        $total += $this->collections[$name][$model];
      }
    }
    return $total;
  }

  public function getAllModels() {
    $all = [];
    foreach ($this->collections as $name => $models) {
      $all = array_merge($all, array_keys($models));
    }
    return array_unique($all);
  }
}
